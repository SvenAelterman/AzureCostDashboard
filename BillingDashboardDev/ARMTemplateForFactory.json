{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "BillingDashboardDev"
		},
		"DashboardSQLService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DashboardSQLService'"
		},
		"AzureKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://JamesDevAzureKeyVault.vault.azure.net/"
		},
		"AzureManagementApi_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://management.azure.com/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ChildPriceLists')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until No Next Link",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set access_token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('exitLoop'), true)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Price Lists",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"additionalColumns": [
												{
													"name": "subscriptionId",
													"value": {
														"value": "@pipeline().parameters.subscriptionId",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"additionalHeaders": {
													"value": "@{concat('Authorization:', variables('access_token'))}",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": [
													"ArmRegionName",
													"EffectiveStartDate",
													"MeterId",
													"MeterName",
													"ProductId",
													"SkuId",
													"Type",
													"TierMinimumUnits",
													"SubscriptionId"
												]
											},
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['currencyCode']"
													},
													"sink": {
														"name": "CurrencyCode",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['tierMinimumUnits']"
													},
													"sink": {
														"name": "TierMinimumUnits",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"path": "[['retailPrice']"
													},
													"sink": {
														"name": "RetailPrice",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"path": "[['unitPrice']"
													},
													"sink": {
														"name": "UnitPrice",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"path": "[['discount']"
													},
													"sink": {
														"name": "Discount",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"path": "[['armRegionName']"
													},
													"sink": {
														"name": "ArmRegionName",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['location']"
													},
													"sink": {
														"name": "Location",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['effectiveStartDate']"
													},
													"sink": {
														"name": "EffectiveStartDate",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "[['meterId']"
													},
													"sink": {
														"name": "MeterId",
														"type": "Guid"
													}
												},
												{
													"source": {
														"path": "[['meterName']"
													},
													"sink": {
														"name": "MeterName",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['productId']"
													},
													"sink": {
														"name": "ProductId",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['skuId']"
													},
													"sink": {
														"name": "SkuId",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['productName']"
													},
													"sink": {
														"name": "ProductName",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['skuName']"
													},
													"sink": {
														"name": "SkuName",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['serviceName']"
													},
													"sink": {
														"name": "ServiceName",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['serviceId']"
													},
													"sink": {
														"name": "ServiceId",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['serviceFamily']"
													},
													"sink": {
														"name": "ServiceFamily",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['unitOfMeasure']"
													},
													"sink": {
														"name": "UnitOfMeasure",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['type']"
													},
													"sink": {
														"name": "Type",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['isPrimaryMeterRegion']"
													},
													"sink": {
														"name": "isPrimaryMeterRegion",
														"type": "Boolean"
													}
												},
												{
													"source": {
														"path": "[['armSkuName']"
													},
													"sink": {
														"name": "ArmSkuName",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['subscriptionId']"
													},
													"sink": {
														"name": "SubscriptionId",
														"type": "String"
													}
												}
											],
											"collectionReference": "$['Items']",
											"mapComplexValuesToString": true
										}
									},
									"inputs": [
										{
											"referenceName": "PriceLists",
											"type": "DatasetReference",
											"parameters": {
												"subscriptionId": {
													"value": "@pipeline().parameters.subscriptionId",
													"type": "Expression"
												},
												"nextLink": {
													"value": "@if(empty(variables('nextLink')), '', variables('nextLink'))",
													"type": "Expression"
												},
												"armRegionName": {
													"value": "@pipeline().parameters.armRegionName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SQL_PriceLists",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "NextLinkCheck",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Copy Price Lists",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@if(empty(variables('nextLink')), concat('https://management.azure.com/subscriptions/', pipeline().parameters.subscriptionId, '/providers/Microsoft.Consumption/pricesheets/default?api-version=2020-01-01-preview&$filter=armRegionName eq ''', pipeline().parameters.armRegionName, ''''), variables('nextLink'))",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {
											"Authorization": {
												"value": "@variables('access_token')",
												"type": "Expression"
											}
										},
										"linkedServices": [
											{
												"referenceName": "AzureManagementApi",
												"type": "LinkedServiceReference"
											}
										]
									}
								},
								{
									"name": "If Next Link Null",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "NextLinkCheck",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(activity('NextLinkCheck').output?.NextPageLink)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set Next Link",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "nextLink",
													"value": {
														"value": "@activity('NextLinkCheck').output?.NextPageLink",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set ExitLoop True",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "exitLoop",
													"value": true
												}
											}
										]
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "OAuthToken",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "AzureKeyValue Secret",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "AzureKeyValue ClientId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://login.microsoftonline.com/', pipeline().globalParameters.tenantId, '/oauth2/token')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=', activity('AzureKeyValue ClientId').output['value'], '&client_secret=', activity('AzureKeyValue Secret').output['value'], '&resource=https%3A%2F%2Fmanagement.azure.com%2F')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set access_token",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "OAuthToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "access_token",
							"value": {
								"value": "@concat('Bearer ', activity('OAuthToken').output['access_token'])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "AzureKeyValue Secret",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.azurekeyvault_client_secret_secretidentifier",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "AzureKeyValue ClientId",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.azurekeyvault_client_id_secretidentifier",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"subscriptionId": {
						"type": "string",
						"defaultValue": "89e6ade6-e91a-4152-bf83-9c83a3cb6ae3"
					},
					"armRegionName": {
						"type": "string",
						"defaultValue": "eastus"
					}
				},
				"variables": {
					"nextLink": {
						"type": "String"
					},
					"access_token": {
						"type": "String"
					},
					"exitLoop": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/PriceLists')]",
				"[concat(variables('factoryId'), '/datasets/SQL_PriceLists')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureManagementApi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ChildResourceGroups')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until No Next Link",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set access_token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('exitLoop'), true)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Resource Groups",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"additionalColumns": [
												{
													"name": "subscriptionId",
													"value": {
														"value": "@pipeline().parameters.subscriptionId",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"additionalHeaders": {
													"value": "@{concat('Authorization:', variables('access_token'))}",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": [
													"Id"
												]
											},
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['id']"
													},
													"sink": {
														"name": "Id",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['name']"
													},
													"sink": {
														"name": "Name",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['location']"
													},
													"sink": {
														"name": "Location",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['subscriptionId']"
													},
													"sink": {
														"name": "SubscriptionId",
														"type": "String"
													}
												}
											],
											"collectionReference": "$['value']",
											"mapComplexValuesToString": true
										}
									},
									"inputs": [
										{
											"referenceName": "ResourceGroups",
											"type": "DatasetReference",
											"parameters": {
												"subscriptionId": {
													"value": "@pipeline().parameters.subscriptionId",
													"type": "Expression"
												},
												"nextLink": {
													"value": "@if(empty(variables('nextLink')), '', variables('nextLink'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SQL_ResourceGroups",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "NextLinkCheck",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Copy Resource Groups",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@if(empty(variables('nextLink')), concat('https://management.azure.com/subscriptions/', pipeline().parameters.subscriptionId, '/resourcegroups?api-version=2017-05-10'), variables('nextLink'))",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {
											"Authorization": {
												"value": "@variables('access_token')",
												"type": "Expression"
											}
										},
										"linkedServices": [
											{
												"referenceName": "AzureManagementApi",
												"type": "LinkedServiceReference"
											}
										]
									}
								},
								{
									"name": "If Next Link Null",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "NextLinkCheck",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(activity('NextLinkCheck').output?.nextLink)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set Next Link",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "nextLink",
													"value": {
														"value": "@activity('NextLinkCheck').output?.nextLink",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set ExitLoop True",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "exitLoop",
													"value": true
												}
											}
										]
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "OAuthToken",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "AzureKeyValue Secret",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "AzureKeyValue ClientId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://login.microsoftonline.com/', pipeline().globalParameters.tenantId, '/oauth2/token')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=', activity('AzureKeyValue ClientId').output['value'], '&client_secret=', activity('AzureKeyValue Secret').output['value'], '&resource=https%3A%2F%2Fmanagement.azure.com%2F')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set access_token",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "OAuthToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "access_token",
							"value": {
								"value": "@concat('Bearer ', activity('OAuthToken').output['access_token'])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "AzureKeyValue Secret",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.azurekeyvault_client_secret_secretidentifier",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "AzureKeyValue ClientId",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.azurekeyvault_client_id_secretidentifier",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"subscriptionId": {
						"type": "string",
						"defaultValue": "89e6ade6-e91a-4152-bf83-9c83a3cb6ae3"
					}
				},
				"variables": {
					"nextLink": {
						"type": "String"
					},
					"access_token": {
						"type": "String"
					},
					"exitLoop": {
						"type": "Boolean",
						"defaultValue": false
					},
					"debug": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ResourceGroups')]",
				"[concat(variables('factoryId'), '/datasets/SQL_ResourceGroups')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureManagementApi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ChildResources')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until No Next Link",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set access_token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('exitLoop'), true)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "NextLinkCheck",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Copy Resources",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@if(empty(variables('nextLink')), concat('https://management.azure.com/', pipeline().parameters.resourceGroupPath, '/resources?api-version=2017-05-10'), variables('nextLink'))",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {
											"Authorization": {
												"value": "@variables('access_token')",
												"type": "Expression"
											}
										},
										"linkedServices": [
											{
												"referenceName": "AzureManagementApi",
												"type": "LinkedServiceReference"
											}
										]
									}
								},
								{
									"name": "If Next Link Null",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "NextLinkCheck",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(activity('NextLinkCheck').output?.nextLink)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set Next Link",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "nextLink",
													"value": {
														"value": "@activity('NextLinkCheck').output?.nextLink",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set ExitLoop True",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "exitLoop",
													"value": true
												}
											}
										]
									}
								},
								{
									"name": "Copy Resources",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"additionalColumns": [
												{
													"name": "resourceGroupId",
													"value": {
														"value": "@pipeline().parameters.resourceGroupPath",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"additionalHeaders": {
													"value": "@{concat('Authorization:', variables('access_token'))}",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": [
													"Id"
												]
											},
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['id']"
													},
													"sink": {
														"name": "Id",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['name']"
													},
													"sink": {
														"name": "Name",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['type']"
													},
													"sink": {
														"name": "Type",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['kind']"
													},
													"sink": {
														"name": "Kind",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['location']"
													},
													"sink": {
														"name": "Location",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['resourceGroupId']"
													},
													"sink": {
														"name": "ResourceGroupId",
														"type": "String"
													}
												}
											],
											"collectionReference": "$['value']"
										}
									},
									"inputs": [
										{
											"referenceName": "Resources",
											"type": "DatasetReference",
											"parameters": {
												"resourceGroupPath": {
													"value": "@pipeline().parameters.resourceGroupPath",
													"type": "Expression"
												},
												"nextLink": {
													"value": "@if(empty(variables('nextLink')), '', variables('nextLink'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SQL_Resources",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "OAuthToken",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "AzureKeyValue Secret",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "AzureKeyValue ClientId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://login.microsoftonline.com/', pipeline().globalParameters.tenantId, '/oauth2/token')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=', activity('AzureKeyValue ClientId').output['value'], '&client_secret=', activity('AzureKeyValue Secret').output['value'], '&resource=https%3A%2F%2Fmanagement.azure.com%2F')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set access_token",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "OAuthToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "access_token",
							"value": {
								"value": "@concat('Bearer ', activity('OAuthToken').output['access_token'])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "AzureKeyValue Secret",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.azurekeyvault_client_secret_secretidentifier",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "AzureKeyValue ClientId",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.azurekeyvault_client_id_secretidentifier",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"resourceGroupPath": {
						"type": "string",
						"defaultValue": "/subscriptions/89e6ade6-e91a-4152-bf83-9c83a3cb6ae3/resourceGroups/FMCSPortalResourceGroup"
					}
				},
				"variables": {
					"nextLink": {
						"type": "String"
					},
					"access_token": {
						"type": "String"
					},
					"exitLoop": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureManagementApi')]",
				"[concat(variables('factoryId'), '/datasets/Resources')]",
				"[concat(variables('factoryId'), '/datasets/SQL_Resources')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ChildUsageAggregates')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until No Next Link",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set access_token",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Delete Subscription UsageAggregates",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('exitLoop'), true)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Usage Aggregates",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"additionalColumns": [
												{
													"name": "subscriptionId",
													"value": {
														"value": "@pipeline().parameters.subscriptionId",
														"type": "Expression"
													}
												},
												{
													"name": "usageDate",
													"value": {
														"value": "@pipeline().parameters.usageDate",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"additionalHeaders": {
													"value": "@{concat('Authorization:', variables('access_token'))}",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['properties']['subscriptionId']"
													},
													"sink": {
														"name": "SubscriptionId",
														"type": "Guid"
													}
												},
												{
													"source": {
														"path": "[['properties']['usageStartTime']"
													},
													"sink": {
														"name": "UsageStartTime",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "[['properties']['usageEndTime']"
													},
													"sink": {
														"name": "UsageEndTime",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "[['properties']['meterName']"
													},
													"sink": {
														"name": "MeterName",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['properties']['meterCategory']"
													},
													"sink": {
														"name": "MeterCategory",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['properties']['meterSubCategory']"
													},
													"sink": {
														"name": "MeterSubCategory",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['properties']['unit']"
													},
													"sink": {
														"name": "Unit",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['properties']['instanceData']"
													},
													"sink": {
														"name": "InstanceData",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['properties']['meterId']"
													},
													"sink": {
														"name": "MeterId",
														"type": "Guid"
													}
												},
												{
													"source": {
														"path": "[['properties']['quantity']"
													},
													"sink": {
														"name": "Quantity",
														"type": "Float"
													}
												},
												{
													"source": {
														"path": "$['usageDate']"
													},
													"sink": {
														"name": "UsageDate"
													}
												}
											],
											"collectionReference": "$['value']",
											"mapComplexValuesToString": true
										}
									},
									"inputs": [
										{
											"referenceName": "UsageAggregates",
											"type": "DatasetReference",
											"parameters": {
												"subscriptionId": {
													"value": "@pipeline().parameters.subscriptionId",
													"type": "Expression"
												},
												"nextLink": {
													"value": "@if(empty(variables('nextLink')), '', variables('nextLink'))",
													"type": "Expression"
												},
												"startDate": {
													"value": "@variables('startDate')",
													"type": "Expression"
												},
												"endDate": {
													"value": "@variables('endDate')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SQL_UsageAggregates",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "NextLinkCheck",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Copy Usage Aggregates",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@if(empty(variables('nextLink')), concat('https://management.azure.com/subscriptions/', pipeline().parameters.subscriptionId, '/providers/Microsoft.Commerce/usageAggregates?reportedStartTime=', variables('startDate') ,'&reportedEndTime=', variables('endDate') ,'&aggregationGranularity=daily&api-version=2015-06-01-preview'), variables('nextLink'))",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {
											"Authorization": {
												"value": "@variables('access_token')",
												"type": "Expression"
											}
										},
										"linkedServices": [
											{
												"referenceName": "AzureManagementApi",
												"type": "LinkedServiceReference"
											}
										]
									}
								},
								{
									"name": "If Next Link Null",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "NextLinkCheck",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(activity('NextLinkCheck').output?.nextLink)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set Next Link",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "nextLink",
													"value": {
														"value": "@activity('NextLinkCheck').output?.nextLink",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set ExitLoop True",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "exitLoop",
													"value": true
												}
											}
										]
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "OAuthToken",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "AzureKeyValue Secret",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "AzureKeyValue ClientId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set startDate",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set endDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://login.microsoftonline.com/', pipeline().globalParameters.tenantId, '/oauth2/token')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=', activity('AzureKeyValue ClientId').output['value'], '&client_secret=', activity('AzureKeyValue Secret').output['value'], '&resource=https%3A%2F%2Fmanagement.azure.com%2F')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set access_token",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "OAuthToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "access_token",
							"value": {
								"value": "@concat('Bearer ', activity('OAuthToken').output['access_token'])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "AzureKeyValue Secret",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.azurekeyvault_client_secret_secretidentifier",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "AzureKeyValue ClientId",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.azurekeyvault_client_id_secretidentifier",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Set startDate",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "startDate",
							"value": {
								"value": "@formatDateTime(adddays(pipeline().parameters.usageDate, -365), 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set endDate",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "endDate",
							"value": {
								"value": "@formatDateTime(pipeline().parameters.usageDate, 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update JSON Properties",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Until No Next Link",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "  UPDATE UsageAggregates\n  SET\n\t ResourceUri = JSON_VALUE(InstanceData, '$.\"Microsoft.Resources\".resourceUri')\n\t,[Location] = JSON_VALUE(InstanceData, '$.\"Microsoft.Resources\".location') \n  WHERE \n\t\tISJSON(InstanceData) > 0\n\tAND ResourceUri IS NULL\n\nSELECT 1 AS COMPLETED",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_UsageAggregates",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Delete Subscription UsageAggregates",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('DELETE FROM UsageAggregates WHERE SubscriptionId = ''', pipeline().parameters.subscriptionId, ''' SELECT 1 AS COMPLETED')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_UsageAggregates",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"subscriptionId": {
						"type": "string",
						"defaultValue": "89e6ade6-e91a-4152-bf83-9c83a3cb6ae3"
					},
					"usageDate": {
						"type": "string",
						"defaultValue": "6/3/2022"
					}
				},
				"variables": {
					"nextLink": {
						"type": "String"
					},
					"access_token": {
						"type": "String"
					},
					"exitLoop": {
						"type": "Boolean",
						"defaultValue": false
					},
					"startDate": {
						"type": "String"
					},
					"endDate": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQL_UsageAggregates')]",
				"[concat(variables('factoryId'), '/datasets/UsageAggregates')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureManagementApi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RootExtractAzureBilling')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "OAuthToken",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "AzureKeyValue Secret",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "AzureKeyValue ClientId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://login.microsoftonline.com/', pipeline().globalParameters.tenantId, '/oauth2/token')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=', activity('AzureKeyValue ClientId').output['value'], '&client_secret=', activity('AzureKeyValue Secret').output['value'], '&resource=https%3A%2F%2Fmanagement.azure.com%2F')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set access_token",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "OAuthToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "access_token",
							"value": {
								"value": "@concat('Bearer ', activity('OAuthToken').output['access_token'])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy Subscribers",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set access_token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET",
									"additionalHeaders": {
										"value": "@{concat('Authorization:', variables('access_token'))}",
										"type": "Expression"
									},
									"requestTimeout": ""
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"SubscriptionId"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['authorizationSource']"
										},
										"sink": {
											"name": "AuthorizationSource",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['subscriptionId']"
										},
										"sink": {
											"name": "SubscriptionId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['displayName']"
										},
										"sink": {
											"name": "DisplayName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['state']"
										},
										"sink": {
											"name": "State",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['value']"
							}
						},
						"inputs": [
							{
								"referenceName": "Subscribers",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_Subscribers",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SQL Subscribers",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy Subscribers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_Subscribers",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SQL Subscribers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SQL Subscribers').output['value']",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute Pipeline Resource Groups",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ChildResourceGroups",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscriptionId": {
												"value": "@item()['SubscriptionId']",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Execute Pipeline Usage Aggregates",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ChildUsageAggregates",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscriptionId": {
												"value": "@item()['SubscriptionId']",
												"type": "Expression"
											},
											"usageDate": {
												"value": "@utcnow()",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "SQL Resource Groups",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_ResourceGroups",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SQL Resource Groups",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SQL Resource Groups').output['value']",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute Pipeline Resources",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ChildResources",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"resourceGroupPath": {
												"value": "@item()['Id']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "AzureKeyValue Secret",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.azurekeyvault_client_secret_secretidentifier",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "AzureKeyValue ClientId",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.azurekeyvault_client_id_secretidentifier",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "SQL Resources",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_Resources",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach3",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SQL Resources",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SQL Resources').output['value']",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Costs",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat('https://management.azure.com', item()['ResourceGroupId'] ,'/providers/Microsoft.CostManagement/query?api-version=2021-10-01&$top=5000')",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Content-Type": "application/json",
											"Authorization": {
												"value": "@variables('access_token')",
												"type": "Expression"
											}
										},
										"body": {
											"value": "@concat('{\"type\":\"ActualCost\",\"dataSet\":{\"granularity\":\"Daily\",\"aggregation\":{\"totalCost\":{\"name\":\"Cost\",\"function\":\"Sum\"},\"totalCostUSD\":{\"name\":\"CostUSD\",\"function\":\"Sum\"}},\"sorting\":[{\"direction\":\"ascending\",\"name\":\"UsageDate\"}],\"filter\":{\"And\":[{\"Dimensions\":{\"Name\":\"PublisherType\",\"Operator\":\"In\",\"Values\":[\"azure\"]}},{\"Dimensions\":{\"Name\":\"ResourceId\",\"Operator\":\"In\",\"Values\":[\"', item()['Id'] ,'\"]}}]}}}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Costs",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('INSERT INTO DataFlowCosts VALUES ''', activity('Costs').output, ''', ''', item()['Id'], '''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQL_DataFlowCosts",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup Distict Subscription_Location",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DISTINCT \n\t rg.SubscriptionId\n\t,r.Location\nFROM\n\tResources r\n\t\tINNER JOIN\n\tResourceGroups rg\n\t\tON r.ResourceGroupId = rg.Id\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_Resources",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Subscription_Location",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Distict Subscription_Location",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Distict Subscription_Location').output['value']",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute Pipeline PriceLists",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ChildPriceLists",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscriptionId": {
												"value": "@item()['SubscriptionId']",
												"type": "Expression"
											},
											"armRegionName": {
												"value": "@item()['Location']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Copy BillingAccounts",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set access_token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET",
									"additionalHeaders": {
										"value": "@{concat('Authorization:', variables('access_token'))}",
										"type": "Expression"
									},
									"requestTimeout": ""
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"AccountId"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "Id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {
											"name": "Name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['properties']['accountId']"
										},
										"sink": {
											"name": "AccountId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['properties']['accountStatus']"
										},
										"sink": {
											"name": "AccountStatus",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['properties']['accountType']"
										},
										"sink": {
											"name": "AccountType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['properties']['agreementType']"
										},
										"sink": {
											"name": "AgreementType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['properties']['displayName']"
										},
										"sink": {
											"name": "DisplayName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['properties']['organizationId']"
										},
										"sink": {
											"name": "OrganizationId",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['value']"
							}
						},
						"inputs": [
							{
								"referenceName": "BillingAccounts",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_BillingAccounts",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BillingAccounts",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy BillingAccounts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_BillingAccounts",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach4",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "BillingAccounts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('BillingAccounts').output['value']",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy BillingSubscription",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Clear BillingSubscriptions",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"additionalColumns": [
												{
													"name": "billingAccountId",
													"value": {
														"value": "@item()['Id']",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"additionalHeaders": {
													"value": "@{concat('Authorization:', variables('access_token'))}",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['properties']['subscriptionId']"
													},
													"sink": {
														"name": "SubscriptionId",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['billingAccountId']"
													},
													"sink": {
														"name": "AccountId",
														"type": "String"
													}
												}
											],
											"collectionReference": "$['value']"
										}
									},
									"inputs": [
										{
											"referenceName": "BillingSubscriptions",
											"type": "DatasetReference",
											"parameters": {
												"BillingAccountId": {
													"value": "@item()['Id']",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SQL_BillingSubscriptions",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Clear BillingSubscriptions",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('DELETE FROM BillingSubscriptions WHERE AccountId = ''', item()['Id'], '''  SELECT 1 AS COMPLETED')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQL_BillingSubscriptions",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"access_token": {
						"type": "String"
					},
					"nextLink": {
						"type": "String",
						"defaultValue": "0"
					},
					"debugger": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-18T14:52:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Subscribers')]",
				"[concat(variables('factoryId'), '/datasets/SQL_Subscribers')]",
				"[concat(variables('factoryId'), '/datasets/SQL_ResourceGroups')]",
				"[concat(variables('factoryId'), '/datasets/SQL_Resources')]",
				"[concat(variables('factoryId'), '/datasets/BillingAccounts')]",
				"[concat(variables('factoryId'), '/datasets/SQL_BillingAccounts')]",
				"[concat(variables('factoryId'), '/pipelines/ChildResourceGroups')]",
				"[concat(variables('factoryId'), '/pipelines/ChildUsageAggregates')]",
				"[concat(variables('factoryId'), '/pipelines/ChildResources')]",
				"[concat(variables('factoryId'), '/datasets/SQL_DataFlowCosts')]",
				"[concat(variables('factoryId'), '/pipelines/ChildPriceLists')]",
				"[concat(variables('factoryId'), '/datasets/BillingSubscriptions')]",
				"[concat(variables('factoryId'), '/datasets/SQL_BillingSubscriptions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BillingAccounts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureManagementApi",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "/providers/Microsoft.Billing/billingAccounts?includeCAID=true&api-version=2019-10-01-preview"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"value": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"properties": {
										"type": "object",
										"properties": {
											"accountId": {
												"type": "string"
											},
											"accountStatus": {
												"type": "string"
											},
											"accountType": {
												"type": "string"
											},
											"agreementType": {
												"type": "string"
											},
											"displayName": {
												"type": "string"
											},
											"hasReadAccess": {
												"type": "boolean"
											},
											"organizationId": {
												"type": "string"
											}
										}
									},
									"type": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureManagementApi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BillingSubscriptions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureManagementApi",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BillingAccountId": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat(dataset().BillingAccountId, '/billingSubscriptions?api-version=2019-10-01-preview&excludeCharges=true')",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"totalCount": {
							"type": "integer"
						},
						"value": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"properties": {
										"type": "object",
										"properties": {
											"billingProfileId": {
												"type": "string"
											},
											"billingProfileDisplayName": {
												"type": "string"
											},
											"displayName": {
												"type": "string"
											},
											"invoiceSectionId": {
												"type": "string"
											},
											"invoiceSectionDisplayName": {
												"type": "string"
											},
											"skuId": {
												"type": "string"
											},
											"skuDescription": {
												"type": "string"
											},
											"subscriptionBillingStatus": {
												"type": "string"
											},
											"subscriptionBillingStatusReasonDetails": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"effectiveDate": {
															"type": "string"
														},
														"subscriptionBillingStatusReason": {
															"type": "string"
														}
													}
												}
											},
											"spendingLimitDetails": {
												"type": "object",
												"properties": {
													"amount": {
														"type": "number"
													},
													"currency": {
														"type": "string"
													},
													"endDate": {
														"type": "string"
													},
													"type": {
														"type": "string"
													},
													"startDate": {
														"type": "string"
													},
													"status": {
														"type": "string"
													}
												}
											},
											"subscriptionId": {
												"type": "string"
											}
										}
									},
									"type": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureManagementApi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Costs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureManagementApi",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"resourceGroupId": {
						"type": "string",
						"defaultValue": "/subscriptions/89e6ade6-e91a-4152-bf83-9c83a3cb6ae3/resourceGroups/FMCSPortalResourceGroup"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat(dataset().resourceGroupId, '/providers/Microsoft.CostManagement/query?api-version=2021-10-01&$top=5000')",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"location": {
							"type": "null"
						},
						"sku": {
							"type": "null"
						},
						"eTag": {
							"type": "null"
						},
						"properties": {
							"type": "object",
							"properties": {
								"nextLink": {
									"type": "null"
								},
								"columns": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"name": {
												"type": "string"
											},
											"type": {
												"type": "string"
											}
										}
									}
								},
								"rows": {
									"type": "array",
									"items": {
										"type": "array",
										"items": {
											"type": "number"
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureManagementApi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PriceLists')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureManagementApi",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"subscriptionId": {
						"type": "string",
						"defaultValue": "89e6ade6-e91a-4152-bf83-9c83a3cb6ae3"
					},
					"nextLink": {
						"type": "string"
					},
					"armRegionName": {
						"type": "string",
						"defaultValue": "eastus"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@if(empty(dataset().nextLink), concat('subscriptions/', dataset().subscriptionId,'/providers/Microsoft.Consumption/pricesheets/default?api-version=2020-01-01-preview&$filter=armRegionName eq ''', dataset().armRegionName, '''' ), replace(dataset().nextLink, 'https://management.azure.com:443', ''))",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"BillingCurrency": {
							"type": "string"
						},
						"CustomerEntityId": {
							"type": "string"
						},
						"CustomerEntityType": {
							"type": "string"
						},
						"Items": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"currencyCode": {
										"type": "string"
									},
									"tierMinimumUnits": {
										"type": "number"
									},
									"retailPrice": {
										"type": "number"
									},
									"unitPrice": {
										"type": "number"
									},
									"discount": {
										"type": "number"
									},
									"armRegionName": {
										"type": "string"
									},
									"location": {
										"type": "string"
									},
									"effectiveStartDate": {
										"type": "string"
									},
									"meterId": {
										"type": "string"
									},
									"meterName": {
										"type": "string"
									},
									"productId": {
										"type": "string"
									},
									"skuId": {
										"type": "string"
									},
									"productName": {
										"type": "string"
									},
									"skuName": {
										"type": "string"
									},
									"serviceName": {
										"type": "string"
									},
									"serviceId": {
										"type": "string"
									},
									"serviceFamily": {
										"type": "string"
									},
									"unitOfMeasure": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"isPrimaryMeterRegion": {
										"type": "boolean"
									},
									"armSkuName": {
										"type": "string"
									}
								}
							}
						},
						"NextPageLink": {
							"type": "string"
						},
						"Count": {
							"type": "integer"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureManagementApi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ResourceGroups')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureManagementApi",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"subscriptionId": {
						"type": "string",
						"defaultValue": "89e6ade6-e91a-4152-bf83-9c83a3cb6ae3"
					},
					"nextLink": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@if(empty(dataset().nextLink), concat('subscriptions/', dataset().subscriptionId,'/resourcegroups?api-version=2017-05-10'), replace(dataset().nextLink, 'https://management.azure.com', ''))",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"value": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"authorizationSource": {
										"type": "string"
									},
									"managedByTenants": {
										"type": "array"
									},
									"subscriptionId": {
										"type": "string"
									},
									"tenantId": {
										"type": "string"
									},
									"displayName": {
										"type": "string"
									},
									"state": {
										"type": "string"
									},
									"subscriptionPolicies": {
										"type": "object",
										"properties": {
											"locationPlacementId": {
												"type": "string"
											},
											"quotaId": {
												"type": "string"
											},
											"spendingLimit": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"count": {
							"type": "object",
							"properties": {
								"type": {
									"type": "string"
								},
								"value": {
									"type": "integer"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureManagementApi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Resources')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureManagementApi",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"resourceGroupPath": {
						"type": "string",
						"defaultValue": "/subscriptions/89e6ade6-e91a-4152-bf83-9c83a3cb6ae3/resourceGroups/FMCSPortalResourceGroup"
					},
					"nextLink": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@if(empty(dataset().nextLink), concat(dataset().resourceGroupPath, '/resources?api-version=2021-04-01'), dataset().nextLink)",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"value": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"sku": {
										"type": "object",
										"properties": {
											"name": {
												"type": "string"
											},
											"tier": {
												"type": "string"
											},
											"size": {
												"type": "string"
											},
											"family": {
												"type": "string"
											},
											"capacity": {
												"type": "integer"
											}
										}
									},
									"kind": {
										"type": "string"
									},
									"location": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureManagementApi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_BillingAccounts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DashboardSQLService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "nvarchar"
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "AccountId",
						"type": "nvarchar"
					},
					{
						"name": "AccountStatus",
						"type": "nvarchar"
					},
					{
						"name": "AccountType",
						"type": "nvarchar"
					},
					{
						"name": "AgreementType",
						"type": "nvarchar"
					},
					{
						"name": "DisplayName",
						"type": "nvarchar"
					},
					{
						"name": "OrganizationId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "BillingAccounts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DashboardSQLService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_BillingSubscriptions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DashboardSQLService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "AccountId",
						"type": "nvarchar"
					},
					{
						"name": "SubscriptionId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "BillingSubscriptions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DashboardSQLService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_Budgets')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DashboardSQLService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "nvarchar"
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "StartDate",
						"type": "date"
					},
					{
						"name": "EndDate",
						"type": "date"
					},
					{
						"name": "Amount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "SubscriptionId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Budgets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DashboardSQLService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_Costs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DashboardSQLService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ResourceId",
						"type": "nvarchar"
					},
					{
						"name": "Cost",
						"type": "decimal",
						"precision": 18,
						"scale": 4
					},
					{
						"name": "CostUSD",
						"type": "decimal",
						"precision": 18,
						"scale": 4
					},
					{
						"name": "UsageDate",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Currency",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Costs"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DashboardSQLService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_DataFlowCosts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DashboardSQLService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "JsonResult",
						"type": "nvarchar"
					},
					{
						"name": "ResourceId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DataFlowCosts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DashboardSQLService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_ExecuteTSQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DashboardSQLService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DashboardSQLService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_PriceLists')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DashboardSQLService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CurrencyCode",
						"type": "nvarchar"
					},
					{
						"name": "TierMinimumUnits",
						"type": "float",
						"precision": 15
					},
					{
						"name": "RetailPrice",
						"type": "float",
						"precision": 15
					},
					{
						"name": "UnitPrice",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Discount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ArmRegionName",
						"type": "nvarchar"
					},
					{
						"name": "Location",
						"type": "nvarchar"
					},
					{
						"name": "EffectiveStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "MeterId",
						"type": "uniqueidentifier"
					},
					{
						"name": "MeterName",
						"type": "nvarchar"
					},
					{
						"name": "ProductId",
						"type": "nvarchar"
					},
					{
						"name": "SkuId",
						"type": "nvarchar"
					},
					{
						"name": "ProductName",
						"type": "nvarchar"
					},
					{
						"name": "SkuName",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "ServiceId",
						"type": "nvarchar"
					},
					{
						"name": "ServiceFamily",
						"type": "nvarchar"
					},
					{
						"name": "UnitOfMeasure",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "nvarchar"
					},
					{
						"name": "isPrimaryMeterRegion",
						"type": "bit"
					},
					{
						"name": "ArmSkuName",
						"type": "nvarchar"
					},
					{
						"name": "SubscriptionId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "PriceLists"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DashboardSQLService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_ResourceGroups')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DashboardSQLService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "nvarchar"
					},
					{
						"name": "SubscriptionId",
						"type": "nvarchar"
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "Location",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ResourceGroups"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DashboardSQLService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_Resources')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DashboardSQLService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "nvarchar"
					},
					{
						"name": "ResourceGroupId",
						"type": "nvarchar"
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "nvarchar"
					},
					{
						"name": "Kind",
						"type": "nvarchar"
					},
					{
						"name": "Location",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Resources"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DashboardSQLService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_Subscribers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DashboardSQLService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "nvarchar"
					},
					{
						"name": "AuthorizationSource",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Subscriptions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DashboardSQLService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_UsageAggregates')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DashboardSQLService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SubscriptionId",
						"type": "uniqueidentifier"
					},
					{
						"name": "UsageStartTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UsageEndTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "MeterName",
						"type": "nvarchar"
					},
					{
						"name": "MeterCategory",
						"type": "nvarchar"
					},
					{
						"name": "MeterSubCategory",
						"type": "nvarchar"
					},
					{
						"name": "Unit",
						"type": "nvarchar"
					},
					{
						"name": "InstanceData",
						"type": "nvarchar"
					},
					{
						"name": "MeterId",
						"type": "uniqueidentifier"
					},
					{
						"name": "Quantity",
						"type": "float",
						"precision": 15
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "UsageAggregates"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DashboardSQLService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Subscribers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureManagementApi",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "subscriptions?api-version=2020-01-01"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"value": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"location": {
										"type": "string"
									},
									"properties": {
										"type": "object",
										"properties": {
											"provisioningState": {
												"type": "string"
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureManagementApi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UsageAggregates')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureManagementApi",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"subscriptionId": {
						"type": "string",
						"defaultValue": "89e6ade6-e91a-4152-bf83-9c83a3cb6ae3"
					},
					"nextLink": {
						"type": "string"
					},
					"startDate": {
						"type": "string"
					},
					"endDate": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@if(empty(dataset().nextLink), concat('subscriptions/', dataset().subscriptionId, '/providers/Microsoft.Commerce/usageAggregates?reportedStartTime=', dataset().startDate, '&reportedEndTime=', dataset().endDate, '&aggregationGranularity=daily &api-version=2015-06-01-preview'), replace(dataset().nextLink, 'https://management.azure.com:443', ''))",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"nextLink": {
							"type": "string"
						},
						"value": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"properties": {
										"type": "object",
										"properties": {
											"subscriptionId": {
												"type": "string"
											},
											"usageStartTime": {
												"type": "string"
											},
											"usageEndTime": {
												"type": "string"
											},
											"meterName": {
												"type": "string"
											},
											"meterCategory": {
												"type": "string"
											},
											"meterSubCategory": {
												"type": "string"
											},
											"unit": {
												"type": "string"
											},
											"instanceData": {
												"type": "string"
											},
											"meterId": {
												"type": "string"
											},
											"infoFields": {
												"type": "object"
											},
											"quantity": {
												"type": "float"
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureManagementApi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureManagementApi')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('AzureManagementApi_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DashboardSQLService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('DashboardSQLService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParseResourceCosts')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SQL_DataFlowCosts",
								"type": "DatasetReference"
							},
							"name": "DataFlowCosts"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQL_Costs",
								"type": "DatasetReference"
							},
							"name": "Costs"
						}
					],
					"transformations": [
						{
							"name": "parse1"
						},
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          JsonResult as string,",
						"          ResourceId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 9999999,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DataFlowCosts",
						"DataFlowCosts parse(JsonResult = JsonResult ? (id as string,",
						"          name as string,",
						"          type as string,",
						"          properties as (nextLink as string,",
						"          columns as (name as string,",
						"     type as string)[],",
						"          rows as string[])),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> parse1",
						"parse1 foldDown(unroll(JsonResult.properties.rows),",
						"     mapColumn(",
						"          costRows = JsonResult.properties.rows,",
						"          flattenResourceId = ResourceId",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(costRows = costRows,",
						"          cost = toDouble(split(substring(costRows, 2, length(costRows)-2), ',')[1]),",
						"          costUSD = toDouble(split(substring(costRows, 2, length(costRows)-2), ',')[2]),",
						"          usageDate = toInteger(split(substring(costRows, 2, length(costRows)-2), ',')[3]),",
						"          currency = split(substring(costRows, 2, length(costRows)-2), ',')[4]) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(usageDate>0)) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ResourceId as string,",
						"          Cost as decimal(18,4),",
						"          CostUSD as decimal(18,4),",
						"          UsageDate as integer,",
						"          Currency as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ResourceId','UsageDate'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CostUSD = costUSD,",
						"          UsageDate = usageDate,",
						"          Currency = currency,",
						"          ResourceId = flattenResourceId,",
						"          Cost = cost",
						"     )) ~> Costs"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQL_DataFlowCosts')]",
				"[concat(variables('factoryId'), '/datasets/SQL_Costs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cost Extract')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "OAuthToken",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "AzureKeyValue Secret",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "AzureKeyValue ClientId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://login.microsoftonline.com/', pipeline().globalParameters.tenantId, '/oauth2/token')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=', activity('AzureKeyValue ClientId').output['value'], '&client_secret=', activity('AzureKeyValue Secret').output['value'], '&resource=https%3A%2F%2Fmanagement.azure.com%2F')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set access_token",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "OAuthToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "access_token",
							"value": {
								"value": "@concat('Bearer ', activity('OAuthToken').output['access_token'])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "AzureKeyValue Secret",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.azurekeyvault_client_secret_secretidentifier",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "AzureKeyValue ClientId",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.azurekeyvault_client_id_secretidentifier",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "SQL Resources",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set access_token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_Resources",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach3",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SQL Resources",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SQL Resources').output['value']",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Costs",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat('https://management.azure.com', item()['ResourceGroupId'] ,'/providers/Microsoft.CostManagement/query?api-version=2021-10-01&$top=5000')",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Content-Type": "application/json",
											"Authorization": {
												"value": "@variables('access_token')",
												"type": "Expression"
											}
										},
										"body": {
											"value": "@concat('{\"type\":\"ActualCost\", \"timeframe\": \"Custom\", \"timePeriod\": { \"from\": \"', formatDateTime(adddays(utcnow(), -364), 'yyyy-MM-dd'), '\", \"to\": \"', formatDateTime(utcnow(), 'yyyy-MM-dd'), '\" },  \"dataSet\":{\"granularity\":\"Daily\",\"aggregation\":{\"totalCost\":{\"name\":\"Cost\",\"function\":\"Sum\"},\"totalCostUSD\":{\"name\":\"CostUSD\",\"function\":\"Sum\"}},\"sorting\":[{\"direction\":\"ascending\",\"name\":\"UsageDate\"}],\"filter\":{\"And\":[{\"Dimensions\":{\"Name\":\"PublisherType\",\"Operator\":\"In\",\"Values\":[\"azure\"]}},{\"Dimensions\":{\"Name\":\"ResourceId\",\"Operator\":\"In\",\"Values\":[\"', item()['Id'] ,'\"]}}]}}}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Costs",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[spInsertDataFlowCost]",
											"storedProcedureParameters": {
												"CostData": {
													"type": "String",
													"value": {
														"value": "@string(activity('Costs').output)",
														"type": "Expression"
													}
												},
												"ResourceId": {
													"type": "String",
													"value": {
														"value": "@item()['Id']",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQL_DataFlowCosts",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "Data flow Parse Resource Costs",
						"description": "",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ParseResourceCosts",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DataFlowCosts": {},
									"Costs": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Update Dates",
						"description": "Date values returned from API are integer based. Parse these to type DATE.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Data flow Parse Resource Costs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "UPDATE Costs\nSET CreatedOn = CONVERT(datetime, CONVERT(CHAR(8), UsageDate))\n\nSELECT 1 AS COMPLETE",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_DataFlowCosts",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"access_token": {
						"type": "String"
					},
					"nextLink": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-18T14:52:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQL_Resources')]",
				"[concat(variables('factoryId'), '/dataflows/ParseResourceCosts')]",
				"[concat(variables('factoryId'), '/datasets/SQL_DataFlowCosts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ChildBudgets')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until No Next Link",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set access_token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('exitLoop'), true)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Budgets",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"additionalColumns": [
												{
													"name": "subscriptionId",
													"value": {
														"value": "@pipeline().parameters.subscriptionId",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"additionalHeaders": {
													"value": "@{concat('Authorization:', variables('access_token'))}",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": [
													"Id"
												]
											},
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['id']"
													},
													"sink": {
														"name": "Id",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['name']"
													},
													"sink": {
														"name": "Name",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['properties']['timePeriod']['startDate']"
													},
													"sink": {
														"name": "StartDate",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "[['properties']['timePeriod']['endDate']"
													},
													"sink": {
														"name": "EndDate",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "[['properties']['amount']"
													},
													"sink": {
														"name": "Amount",
														"type": "Double"
													}
												},
												{
													"source": {
														"path": "$['subscriptionId']"
													},
													"sink": {
														"name": "SubscriptionId",
														"type": "String"
													}
												}
											],
											"collectionReference": "$['value']",
											"mapComplexValuesToString": true
										}
									},
									"inputs": [
										{
											"referenceName": "Budgets",
											"type": "DatasetReference",
											"parameters": {
												"subscriptionId": {
													"value": "@pipeline().parameters.subscriptionId",
													"type": "Expression"
												},
												"nextLink": {
													"value": "@if(empty(variables('nextLink')), '', variables('nextLink'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SQL_Budgets",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "NextLinkCheck",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Copy Budgets",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@if(empty(variables('nextLink')), concat('https://management.azure.com/subscriptions/', pipeline().parameters.subscriptionId, '/providers/Microsoft.Consumption/budgets?api-version=2021-10-01'), variables('nextLink'))",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {
											"Authorization": {
												"value": "@variables('access_token')",
												"type": "Expression"
											}
										},
										"linkedServices": [
											{
												"referenceName": "AzureManagementApi",
												"type": "LinkedServiceReference"
											}
										]
									}
								},
								{
									"name": "If Next Link Null",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "NextLinkCheck",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(activity('NextLinkCheck').output?.nextLink)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set Next Link",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "nextLink",
													"value": {
														"value": "@activity('NextLinkCheck').output?.nextLink",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set ExitLoop True",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "exitLoop",
													"value": true
												}
											}
										]
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "OAuthToken",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "AzureKeyValue Secret",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "AzureKeyValue ClientId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://login.microsoftonline.com/', pipeline().globalParameters.tenantId, '/oauth2/token')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=', activity('AzureKeyValue ClientId').output['value'], '&client_secret=', activity('AzureKeyValue Secret').output['value'], '&resource=https%3A%2F%2Fmanagement.azure.com%2F')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set access_token",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "OAuthToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "access_token",
							"value": {
								"value": "@concat('Bearer ', activity('OAuthToken').output['access_token'])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "AzureKeyValue Secret",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.azurekeyvault_client_secret_secretidentifier",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "AzureKeyValue ClientId",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.azurekeyvault_client_id_secretidentifier",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"subscriptionId": {
						"type": "string",
						"defaultValue": "89e6ade6-e91a-4152-bf83-9c83a3cb6ae3"
					}
				},
				"variables": {
					"nextLink": {
						"type": "String"
					},
					"access_token": {
						"type": "String"
					},
					"exitLoop": {
						"type": "Boolean",
						"defaultValue": false
					},
					"debug": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Budgets')]",
				"[concat(variables('factoryId'), '/datasets/SQL_Budgets')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureManagementApi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Budgets')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureManagementApi",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"subscriptionId": {
						"type": "string",
						"defaultValue": "89e6ade6-e91a-4152-bf83-9c83a3cb6ae3"
					},
					"nextLink": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@if(empty(dataset().nextLink), concat('subscriptions/', dataset().subscriptionId,'/providers/Microsoft.Consumption/budgets?api-version=2021-10-01'), replace(dataset().nextLink, 'https://management.azure.com', ''))",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"nextLink": {
							"type": "string"
						},
						"value": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"eTag": {
										"type": "string"
									},
									"properties": {
										"type": "object",
										"properties": {
											"timePeriod": {
												"type": "object",
												"properties": {
													"startDate": {
														"type": "string"
													},
													"endDate": {
														"type": "string"
													}
												}
											},
											"timeGrain": {
												"type": "string"
											},
											"amount": {
												"type": "number"
											},
											"currentSpend": {
												"type": "object",
												"properties": {
													"amount": {
														"type": "number"
													},
													"unit": {
														"type": "string"
													}
												}
											},
											"category": {
												"type": "string"
											},
											"notifications": {
												"type": "object",
												"properties": {
													"actual_GreaterThan_95_Percent": {
														"type": "object",
														"properties": {
															"enabled": {
																"type": "boolean"
															},
															"operator": {
																"type": "string"
															},
															"threshold": {
																"type": "number"
															},
															"contactEmails": {
																"type": "array",
																"items": {
																	"type": "string"
																}
															},
															"contactRoles": {
																"type": "array"
															},
															"contactGroups": {
																"type": "array"
															},
															"thresholdType": {
																"type": "string"
															}
														}
													}
												}
											},
											"filter": {
												"type": "object",
												"properties": {}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureManagementApi')]"
			]
		}
	]
}