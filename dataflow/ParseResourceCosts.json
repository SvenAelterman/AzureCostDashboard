{
	"name": "ParseResourceCosts",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SQL_DataFlowCosts",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "parse1"
				},
				{
					"name": "flatten1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          JsonResult as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source1 parse(JsonResult = JsonResult ? (id as string,",
				"          name as string,",
				"          type as string,",
				"          properties as (nextLink as string,",
				"          columns as (name as string,",
				"     type as string)[],",
				"          rows as string[])),",
				"     format: 'json',",
				"     documentForm: 'singleDocument') ~> parse1",
				"parse1 foldDown(unroll(JsonResult.properties.rows),",
				"     mapColumn(",
				"          costRows = JsonResult.properties.rows,",
				"          id = JsonResult.id",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 derive(costRows = costRows,",
				"          cost = toDouble(split(substring(costRows, 2, length(costRows)-2), ',')[1]),",
				"          costUSD = toDouble(split(substring(costRows, 2, length(costRows)-2), ',')[2]),",
				"          UsageDate = toInteger(split(substring(costRows, 2, length(costRows)-2), ',')[3]),",
				"          Currency = split(substring(costRows, 2, length(costRows)-2), ',')[4]) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> sink1"
			]
		}
	}
}